package com.example.turbo.dcidr.android_activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.view.ViewPager;import android.support.v7.app.AlertDialog;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import com.example.turbo.dcidr.R;import com.example.turbo.dcidr.global.DcidrApplication;import com.example.turbo.dcidr.main.activity_helper.main_activity_helper.MainActivityViewPagerAdapter;import com.example.turbo.dcidr.main.activity_helper.user_activity_helper.UserActivityHelper;import com.example.turbo.dcidr.utils.layout_utils.SlidingTabLayout;import com.google.android.gms.location.LocationSettingsStates;import java.util.List;/** * Created by Turbo on 3/10/2016. */public class MainActivity extends BaseActivity {    private SlidingTabLayout mSlidingTabLayout;    private ViewPager mViewPager;    private MainActivityViewPagerAdapter mMainActivityViewPagerAdapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        // make sure user is populated before proceeding, refer to base activity onCreate        setUserFetchListener(new UserFetchListener() {            @Override            public void onFetchDone() {                initActivity();            }        });        super.onCreate(savedInstanceState);    }    public void initActivity() {        // setSharedPreferences by passing activity context.        DcidrApplication.getInstance().getUserCache().setSharedPreferences(this);        IntentFilter filter = new IntentFilter();        filter.addAction(getString(R.string.main_activity_notification_action_filter));        LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver, filter);        setContentView(R.layout.activity_main);        // set app toolbar        Toolbar toolbar = (Toolbar) findViewById(R.id.app_toolbar);        setSupportActionBar(toolbar);        // prompt if location service is not enabled        // TODO Enable later        //mLocationEnabler = new LocationEnabler(this);        //mLocationEnabler.enableLocation(BaseActivity.LOCATION_ENABLE_REQUEST_CODE);        final Animation animationFadeOut = AnimationUtils.loadAnimation(this, R.anim.fade_out);        final Animation animationScale = AnimationUtils.loadAnimation(this, R.anim.scale);        final FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (mMainActivityViewPagerAdapter.getItem(mViewPager.getCurrentItem()) instanceof GroupFragment) {                    fab.startAnimation(animationScale);                    view.postDelayed(new Runnable() {                        @Override                        public void run() {                            fab.startAnimation(animationFadeOut);                            Intent selectNewEventActivity = new Intent(MainActivity.this, SelectNewEventActivity.class);                            startActivity(selectNewEventActivity);                        }                    }, 100);                } else if (mMainActivityViewPagerAdapter.getItem(mViewPager.getCurrentItem()) instanceof HistoryFragment) {                    //no op for button click. no fb for this page                } else if (mMainActivityViewPagerAdapter.getItem(mViewPager.getCurrentItem()) instanceof ContactsFragment){                    fab.startAnimation(animationScale);                    view.postDelayed(new Runnable() {                        @Override                        public void run() {                            fab.startAnimation(animationFadeOut);                            Intent contactInvitationActivity = new Intent(MainActivity.this, ContactInvitation.class);                            startActivity(contactInvitationActivity);                        }                    }, 100);                }            }        });        mViewPager = (ViewPager) findViewById(R.id.view_pager);        mMainActivityViewPagerAdapter = new MainActivityViewPagerAdapter(getSupportFragmentManager());        mViewPager.setAdapter(mMainActivityViewPagerAdapter);        mViewPager.setOffscreenPageLimit(3);        mViewPager.setCurrentItem(1);        mSlidingTabLayout = (SlidingTabLayout) findViewById(R.id.sliding_layout);        mSlidingTabLayout.setDistributeEvenly(true);        mSlidingTabLayout.setViewPager(mViewPager);        mSlidingTabLayout.setCustomTabColorizer(mCustomTabColorizer);        mSlidingTabLayout.setOnPageChangeListener(mSlidingTabOnPageChangeListener);        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                if (position == 0) {                    fab.setVisibility(View.GONE);                } else if (position == 1){                    fab.setImageResource(R.drawable.add_activity_icon);                    fab.setVisibility(View.VISIBLE);                } else if (position == 2) {                    fab.setImageResource(R.drawable.invite_contact_icon);                    fab.setVisibility(View.VISIBLE);                }            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        List<Fragment> fragments = getSupportFragmentManager().getFragments();        if (fragments != null) {            for (Fragment fragment : fragments) {                fragment.onRequestPermissionsResult(requestCode, permissions, grantResults);            }        }    }    // Our handler for received Intents. This will be called whenever an Intent    // with an action named "custom-event-name" is broadcasted.    private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            // Get extra data included in the Intent            String source = intent.getStringExtra("SOURCE");            String target = intent.getStringExtra("TARGET");            String action = intent.getStringExtra("ACTION");            if (source != null) {                if (source.equals("GCM") || source.equals("LOCAL")) {                    if (target.equals("GROUP") && action.equals("REFRESH")) {                        GroupFragment groupFragment = (GroupFragment) mMainActivityViewPagerAdapter.getFragmentByName("GroupFragment");                        DcidrApplication.getInstance().getGlobalGroupContainer().refreshGroupList();                        if (groupFragment.getGroupCustomArrayAdapter() != null) {                            groupFragment.getGroupCustomArrayAdapter().notifyDataSetChanged();                        }                    } else if (target.equals("FRIEND") && action.equals("REFRESH")) {                        ContactsFragment contactsFragment = (ContactsFragment) mMainActivityViewPagerAdapter.getFragmentByName("ContactsFragment");                        DcidrApplication.getInstance().getGlobalContactContainer().refreshContactList();                        if (contactsFragment.getContactsFragmentCustomArrayAdapter() != null) {                            contactsFragment.getContactsFragmentCustomArrayAdapter().notifyDataSetChanged();                        }                    }                }            }        }    };    /**     * initialize main activity view. Since main activity is singleTask, we need to re-init when     * logout and login happens     */    public void resetMain(){        //mMainActivityViewPagerAdapter = new MainActivityViewPagerAdapter(getSupportFragmentManager());        mMainActivityViewPagerAdapter.clearFragments(getSupportFragmentManager());        mMainActivityViewPagerAdapter.notifyDataSetChanged();        mViewPager.setAdapter(mMainActivityViewPagerAdapter);        mViewPager.setCurrentItem(1);        mViewPager.setOffscreenPageLimit(3);        //mLocationEnabler.enableLocation(BaseActivity.LOCATION_ENABLE_REQUEST_CODE);    }    /**     * tab colorizer to customize tab color     */    private SlidingTabLayout.TabColorizer mCustomTabColorizer = new SlidingTabLayout.TabColorizer() {        private int[] mIndicatorColors;        @Override        public final int getIndicatorColor(int position) {            //return mIndicatorColors[position % mIndicatorColors.length];            return ContextCompat.getColor(MainActivity.this, R.color.md_gray_400);        }        @Override        public int getTabTitleColor() {            return ContextCompat.getColor(MainActivity.this, R.color.white);        }        @Override        public float getTabTitleTextSize() {            return 16;        }    };    /**     * listener for on page change for view pager     */    private ViewPager.OnPageChangeListener mSlidingTabOnPageChangeListener = new ViewPager.OnPageChangeListener() {        @Override        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        }        @Override        public void onPageSelected(int position) {        }        @Override        public void onPageScrollStateChanged(int state) {        }    };    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        /*        "singleTask"        The system creates a new task and instantiates the activity at the root of the new task.        However, if an instance of the activity already exists in a separate task, the system routes        the intent to the existing instance through a call to its onNewIntent() method, rather than        creating a new instance. Only one instance of the activity can exist at a time.        Note: Although the activity starts in a new task, the Back button still returns        the user to the previous activity.        */        String source = intent.getStringExtra("SOURCE");        // ************************************        // This code takes care of sending user to login screen if no logged in, it also takes        // care of handling login and logout condition of login and logout for notification        // ************************************        // setSharedPreferences by passing activity context.        DcidrApplication.getInstance().getUserCache().setSharedPreferences(this);        // get userId from cache        String userId = DcidrApplication.getInstance().getUserCache().get("userId");        if (userId == null){            finish();        }        // ************************************        // This code takes care of doing re initialization of certain object when login is        // done second time. New user might login this time so this is needed.        // ************************************        if(source != null && source.equals(getResources().getString(R.string.login_activity_class_name))){            // setSharedPreferences by passing activity context.            DcidrApplication.getInstance().getUserCache().setSharedPreferences(this);            resetMain();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        MenuItem userName = (MenuItem) menu.findItem(R.id.temp_user_name);        userName.setTitle(DcidrApplication.getInstance().getUser().getFirstName());        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == R.id.action_settings) {            return true;        }else if(id == R.id.action_logout) {            showLogoutDialog();        }        return super.onOptionsItemSelected(item);    }    /**     * method to handle logout dialog, logout action and launching login activity     * if logout is selected     */    public void showLogoutDialog(){        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setCustomTitle(getCustomDialogTitleTextView(getResources().getString(R.string.logout_msg), 20));        builder.setPositiveButton(R.string.positive_button_msg, new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int id) {                UserActivityHelper userActivityHelper = new UserActivityHelper(MainActivity.this);                userActivityHelper.logoutUser();            }        })                .setNegativeButton(R.string.negative_button_msg, new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                    }                })                .create().show();    }    @Override    public void onBackPressed() {        // since we don't want user to go back to previous activity when they are on login        // activity, we don't call super.onBackPressed();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        final LocationSettingsStates states = LocationSettingsStates.fromIntent(data);        if(requestCode == BaseActivity.LOCATION_ENABLE_REQUEST_CODE){            if (resultCode == RESULT_OK){                // nothing to do            }else if (resultCode == RESULT_CANCELED){                // nothing to do            }        }    }    public ViewPager getViewPager() {        return mViewPager;    }    @Override    protected void onDestroy() {        super.onDestroy();        LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver);        mMainActivityViewPagerAdapter.clearFragments(getSupportFragmentManager());        mMainActivityViewPagerAdapter = null;        mViewPager = null;    }}